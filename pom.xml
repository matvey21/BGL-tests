<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.come2play.stage-cms</groupId>
    <artifactId>stage-cms</artifactId>

    <!--<packaging>jar</packaging>  &lt;!&ndash; Output to jar format &ndash;&gt;-->
    <!--<packaging>pom</packaging>-->

    <version>1.0-SNAPSHOT</version>
    <name>stage-cms</name>
    <url>http://maven.apache.org</url>

    <!--<distributionManagement>-->
        <!--<repository>-->
            <!--<id></id>-->
            <!--<name></name>-->
            <!--<url></url>-->
        <!--</repository>-->
    <!--</distributionManagement>-->


    <properties>
        <jdk.version>1.8</jdk.version>
        <jodatime.version>2.9.1</jodatime.version>
        <testng.version>6.9.4</testng.version>
        <log4j.version>1.2.17</log4j.version>

        <selenium-server.version>2.47.1</selenium-server.version>
        <selenium-java.version>2.47.1</selenium-java.version>

        <rhino.version>1.7R3</rhino.version>
        <htmlunit.version>2.17</htmlunit.version>
        <robotframework-selenium2library-java.version>1.4.0.7</robotframework-selenium2library-java.version>
        <jacob.version>1.14.3</jacob.version>

        <hostname>http://stage-cms.come2play.com/</hostname>  <!-- way to pass the variable from file to POM.xml :
        if <hostname></hostname> uses empty then pass parameter to maven build: mvn install "-Dhostname=propety value"-->
        <!--or we can pass url ( <hostname>http://stage-cms.come2play.com/</hostname> ) like variable
        and also we can launch profiles if we want to switch quickly between parameters-->
    </properties>



    <dependencies>
        <dependency>
            <groupId>org.seleniumhq.selenium</groupId>
            <artifactId>selenium-server</artifactId>
            <version>${selenium-server.version}</version>
        </dependency>

        <dependency>
            <groupId>org.seleniumhq.selenium</groupId>
            <artifactId>selenium-java</artifactId>
            <version>${selenium-java.version}</version>
        </dependency>

        <dependency>
            <groupId>org.testng</groupId>
            <artifactId>testng</artifactId>
            <version>${testng.version}</version>
        </dependency>

        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
            <version>${log4j.version}</version>
        </dependency>

        <!--<dependency>
            <groupId>net.jsourcerer.webdriver</groupId>
            <artifactId>JSErrorCollector</artifactId>
            <version>0.6</version>
        </dependency>
        <dependency>
            <groupId>com.canoo.webtest</groupId>
            <artifactId>webtest</artifactId>
            <version>3.1-SNAPSHOT</version>
        </dependency>-->

        <dependency>
            <groupId>joda-time</groupId>
            <artifactId>joda-time</artifactId>
            <version>${jodatime.version}</version>
        </dependency>

        <dependency>
            <groupId>org.mozilla</groupId>
            <artifactId>rhino</artifactId>
            <version>${rhino.version}</version>
        </dependency>

        <dependency>
            <groupId>net.sourceforge.htmlunit</groupId>
            <artifactId>htmlunit</artifactId>
            <version>${htmlunit.version}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>com.github.markusbernhardt</groupId>
            <artifactId>robotframework-selenium2library-java</artifactId>
            <version>${robotframework-selenium2library-java.version}</version>
        </dependency>

        <dependency>
            <groupId>net.sf.jacob-project</groupId>
            <artifactId>jacob</artifactId>
            <version>${jacob.version}</version>
            <type>jar</type>
        </dependency>
        <dependency>
            <groupId>net.sf.jacob-project</groupId>
            <artifactId>jacob</artifactId>
            <version>${jacob.version}</version>
            <type>dll</type>
            <classifier>x64</classifier>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>net.sf.jacob-project</groupId>
            <artifactId>jacob</artifactId>
            <version>${jacob.version}</version>
            <type>dll</type>
            <classifier>x86</classifier>
            <scope>provided</scope>
        </dependency>

        <!-- javax.mail & javax.activation >>> used for sending mail to stakeholders after finishing tests execution-->
      <!--  <dependency>
            <groupId>javax.mail</groupId>
            <artifactId>javax.mail-api</artifactId>
            <version>1.5.1</version>
        </dependency>-->
        <dependency>
            <groupId>com.sun.mail</groupId>
            <artifactId>javax.mail</artifactId>
            <version>1.5.5</version>
        </dependency>
        <dependency>
            <groupId>javax.activation</groupId>
            <artifactId>activation</artifactId>
            <version>1.1.1</version>
        </dependency>

        <!-- Reporting system-->
        <dependency>
            <groupId>com.relevantcodes</groupId>
            <artifactId>extentreports</artifactId>
            <version>2.40</version>
        </dependency>

        <!-- poi work with MS office docs-->
        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi</artifactId>
            <version>3.13</version>
        </dependency>

        <!-- https://dev64.wordpress.com/2013/02/17/dependency-injection-google-guice/ -->
        <dependency>
            <groupId>com.google.inject</groupId>
            <artifactId>guice</artifactId>
            <version>4.0</version>
        </dependency>

        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>5.1.6</version>
        </dependency>

    </dependencies>






    <build>
        <finalName>stage-cms-tests</finalName>
        <plugins>


            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.9</version>
                <configuration>
                    <!--<downloadSources>true</downloadSources>   download source code, best practice-->
                    <!--<downloadJavadocs>false</downloadJavadocs>-->
                    <suiteXmlFiles>
                        <suiteXmlFile>src/test/resources/testng.xml</suiteXmlFile>
                    </suiteXmlFiles>
                    <testFailureIgnore>true</testFailureIgnore>
                    <systemPropertyVariables>
                        <!--<environment>${env.USER}</environment>-->
                    <stage_url_param>${hostname}</stage_url_param>
                    </systemPropertyVariables>
                </configuration>
            </plugin>

            <plugin>
                <groupId>ch.fortysix</groupId>
                <artifactId>maven-postman-plugin</artifactId>
                <version>0.1.6</version>
                <executions>
                    <execution>
                        <id>send_an_mail</id>
                        <phase>test</phase>
                        <goals>
                            <goal>send-mail</goal>
                        </goals>
                        <inherited>true</inherited>
                        <configuration>
                            <mailhost>smtp.gmail.com</mailhost>
                            <mailport>465</mailport>
                            <mailssl>true</mailssl>
                            <mailAltConfig>true</mailAltConfig>
                            <mailuser>d.matvienko@come2play.com</mailuser>
                            <mailpassword>G8nUHQ&amp;Xx</mailpassword>

                            <from>d.matvienko@come2play.com</from>
                            <receivers>
                                <receiver>d.matvienko@come2play.com</receiver>
                                <!--<receiver></receiver>-->
                            </receivers>

                            <subject>Automation test report (stage-CMS)</subject>
                            <failonerror>false</failonerror>
                            <htmlMessage>
                                <![CDATA[
                                    <p>Hello.. dear Team. Please review my Automation Tests report.</p>
                                    <br>
                                    <p>This Mail Send Automatically by Robot, after tests execution finishes.</p>
                                    <p>If you don't want to receive this mail please contact with: Dmitry Matvienko  d.matvienko@come2play.com (QA Engineer). </p>
                                    <p>Thanks :)</p>
                                ]]>
                            </htmlMessage>

                            <fileSets>
                                <fileSet>
                                    <!--<directory>/home/dima/Downloads/-autotest-data/ExtentReports</directory>-->
                                    <directory>${basedir}/target/surefire-reports/</directory>
                                    <includes>
                                        <include>**/index.html</include>
                                    </includes>
                                </fileSet>
                            </fileSets>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!--<plugin>  <!-look https://devcenter.heroku.com/articles/deploy-a-java-web-application-that-launches-with-jetty-runner
                <artifactId>maven-antrun-plugin</artifactId>
                <version>1.7</version>
                <executions>
                    <execution>
                        <id>Run URL in system browser.</id>
                        <phase>install</phase>
                        <configuration>
                            <target>
                                <exec executable="start" vmlauncher="false">
                                    <arg line="http://localhost:8080/rap?startup=entrypoint"/>
                                </exec>
                            </target>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>-->


            <!-- Set a JDK compiler level -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>2.5.1</version>
                <configuration>
                    <source>${jdk.version}</source>
                    <target>${jdk.version}</target>
                </configuration>
            </plugin>

            <!-- Make this jar executable -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>2.6</version>
                <configuration>
                    <!-- DO NOT include log4j.properties file in your Jar
                    <excludes>
                        <exclude>**/log4j.properties</exclude>
                    </excludes>-->
                    <archive>
                        <manifest>
                            <addClasspath>true</addClasspath>
                            <!-- Jar file entry point -->
                            <mainClass>stage-CMS</mainClass>
                            <classpathPrefix>target/dependency-jars/</classpathPrefix>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>

            <!-- Copy project dependency -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>2.6</version>
                <executions>
                    <execution>
                        <id>copy-dependencies</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                             <!--exclude junit, we need runtime dependency only-->
                            <includeScope>runtime</includeScope>
                            <outputDirectory>${project.build.directory}/dependency-jars/</outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>2.4.2</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <transformers>
                                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                    <manifestEntries>
                                        <Main-Class>stage-CMS</Main-Class>
                                        <Build-Number>0.1</Build-Number>
                                    </manifestEntries>
                                </transformer>
                            </transformers>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <artifactId>maven-assembly-plugin</artifactId>
                <version>2.6</version>
                <configuration>
                    <descriptorRefs>
                        <descriptorRef>jar-with-dependencies</descriptorRef>
                    </descriptorRefs>
                    <archive>
                        <manifest>
                            <mainClass>stage-CMS.src.test.resources.testng.xml</mainClass>
                        </manifest>
                    </archive>
                </configuration>
                <executions>
                    <execution>
                        <id>make-assembly</id> <!-- this is used for inheritance merges -->
                        <phase>package</phase> <!-- bind to the packaging phase -->
                        <goals>
                            <goal>single</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>


            <plugin>
                <groupId>org.robotframework</groupId>
                <artifactId>robotframework-maven-plugin</artifactId>
                <version>1.4.5</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

        </plugins>

    </build>

<!--    <profiles>
        <profile>
        <id>default</id>
        <activation>
            <activeByDefault>true</activeByDefault>
        </activation>
        <properties>
            <stage_url_param>${hostname}</stage_url_param>
        </properties>
        </profile>
    </profiles>-->

</project>


<!--
 - - how create *.jar of project
mvn package   - Package the project.
mvn clean compile assembly:single
mvn idea:idea
jar tf target/stage-cms-tests-jar-with-dependencies.jar   -  List out the .jar content
java -jar target/stage-cms-tests-jar-with-dependencies.jar  -  Run it
java -cp target/my-app-1.0-SNAPSHOT.jar com.mycompany.app.App
mvn clean dependency:copy-dependencies package

 - - Failed to execute goal org.apache.maven.plugins
mvn clean install -X
mvn clean install -U
mvn -DcoberturaHaltOnError=false

mvn dependency::tree (locate the dependencies you're missing)
mvn verify (project's dependencies will then be automatically analyzed during the verify lifecycle phase)

Some of the important phases of Maven build lifecycle are:
clean – the project is clean of all artifacts that came from previous compilations
compile – the project is compiled into /target directory of project root
install – packaged archive is copied into local maven repository (could in your user's home directory under /.m2)
test – unit tests are run package – compiled sources are packaged into archive (JAR by default)

mvn clean test -Dhostname=http://stage-cms.come2play.com/

-->